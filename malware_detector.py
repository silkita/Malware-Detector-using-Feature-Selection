#!/usr/bin/env python
# coding: utf-8


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.feature_selection import chi2
from sklearn.feature_selection import SelectKBest
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.feature_selection import VarianceThreshold
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
import warnings

warnings.filterwarnings("ignore")
pd.set_option('display.max_columns', 500)

read_file = pd.read_csv('dataset_malwares.csv')

read_file.head(5)

read_file.describe()

read_file.isnull().any().any()

read_file['Malware'].value_counts()

# <h2>Data Analysis</h2>

read_file[read_file.columns[2:]].mean().plot('hist');
plt.title('Distribution of means of all columns');

print('Distributions of first 28 columns')
plt.figure(figsize=(26, 24))
for i, col in enumerate(list(read_file.columns)[2:30]):
    plt.subplot(7, 4, i + 1)
    plt.hist(read_file[col])
    plt.title(col)

corrs = read_file.corr().abs().unstack().sort_values(kind="quicksort").reset_index()
corrs = corrs[corrs['level_0'] != corrs['level_1']]
corrs.tail(10)

X = read_file.drop(['Name', 'Malware'], axis=1)
y = read_file['Malware']
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, test_size=0.25)

print('Orignal file Shape', read_file.shape)
print('X features Shape', X_train.shape)
print('Testing Features Shape', X_test.shape)
print('train shape', y_train.shape)
print('Test Target shape', y_test.shape)

y.value_counts()

# <h3> Variance Feature Selection</h3>

variance_value_train = VarianceThreshold(threshold=(.8 * (1 - .8)))
variance_value_train = variance_value_train.fit_transform(X_train)

variance_value_test = VarianceThreshold(threshold=(.8 * (1 - .8)))
variance_value_test = variance_value_test.fit_transform(X_test)

# <h3>Model Building using Variance Feature Selection and Validation</h3>

# <h5>KNN</h5>


knn_model = KNeighborsClassifier(n_neighbors=2).fit(variance_value_train, y_train)

knn_predict = knn_model.predict(variance_value_test)
knn_accuracy = accuracy_score(knn_predict, y_test)
print("{0:.10f}".format(knn_accuracy))

# <h5>SVC</h5>

svc_model = svm.SVC(kernel='rbf', C=1).fit(variance_value_train, y_train)

svm_predict = svc_model.predict(variance_value_test)
svc_accuracy = accuracy_score(svm_predict, y_test)
print("{0:.10f}".format(svc_accuracy))

# <h5> Decision Tree Classifier</h5>

Decison_tree = DecisionTreeClassifier(random_state=0).fit(variance_value_train, y_train)

Decison_tree_predict = Decison_tree.predict(variance_value_test)
Decison_tree_accuracy = accuracy_score(Decison_tree_predict, y_test)
print("{0:.10f}".format(Decison_tree_accuracy))

# <h5>Logistic Regression</h5>

LR = LogisticRegression(random_state=0, solver='lbfgs', multi_class='multinomial').fit(variance_value_train, y_train)

LR_predict = LR.predict(variance_value_test)
LR_accuracy = accuracy_score(LR_predict, y_test)
print("{0:.10f}".format(LR_accuracy))

# <h5>Random Forest </h5>


RF_model = RandomForestClassifier(n_estimators=100, max_depth=1, random_state=0).fit(variance_value_train, y_train)

RF_predict = RF_model.predict(variance_value_test)
RF_accuracy = accuracy_score(RF_predict, y_test)
print("{0:.10f}".format(RF_accuracy))

# <h3>Test Data Usage</h3>


read_testdata = pd.read_csv('dataset_test.csv')

read_testdata.head(5)

Predicted_test = read_testdata.drop(['Name'], axis=1)
name_column = read_testdata['Name']
#print('X value', X.shape)
#+print('Predicted_test', Predicted_test.shape)

X_variance = VarianceThreshold(threshold=(.8 * (1 - .8)))
X_variance_value = X_variance.fit_transform(X)

test = VarianceThreshold(threshold=(.8 * (1 - .8)))
test = X_variance.transform(Predicted_test)

# <h5>KNN with test usage</h5>


knn_test = KNeighborsClassifier(n_neighbors=5).fit(X_variance_value, y)

knn_test_predict = knn_test.predict(test)
knn_test_predict = pd.DataFrame(knn_test_predict, columns=['Predicted_malware'])
result_knn = pd.concat([name_column, knn_test_predict], axis=1)
result_knn.to_csv('knn_result.csv', index=None)

# <h5>SVM with test usage</h5>


svc_test = svm.SVC(kernel='rbf', C=1).fit(X_variance_value, y)

svc_test_predict = svc_test.predict(test)
svc_test_predict = pd.DataFrame(svc_test_predict, columns=['Predicted_malware'])
result_svc = pd.concat([name_column, svc_test_predict], axis=1)
result_svc.to_csv('svc_result.csv', index=None)

# <h5>Decision Tree with test usage</h5>

Decison_test = DecisionTreeClassifier(random_state=0).fit(X_variance_value, y)

Decison_test_predict = Decison_test.predict(test)
Decison_test_predict = pd.DataFrame(Decison_test_predict, columns=['Predicted_malware'])
result_Decison = pd.concat([name_column, Decison_test_predict], axis=1)
result_Decison.to_csv('Decison_result.csv', index=None)

# <h5>Logistic Regression with test usage</h5>

LR_test = LogisticRegression(random_state=0, solver='lbfgs', multi_class='binary').fit(variance_value_train,
                                                                                            y_train)

LR_test_predict = LR_test.predict(test)
LR_test_predict = pd.DataFrame(LR_test_predict, columns=['Predicted_malware'])
result_LR = pd.concat([name_column, LR_test_predict], axis=1)
result_LR.to_csv('LR_result.csv', index=None)

# <h5>Random Forest with usage</h5>

RF_test = RandomForestClassifier(n_estimators=100, max_depth=1, random_state=0).fit(variance_value_train, y_train)

RF_test_predict = RF_test.predict(test)
RF_test_predict = pd.DataFrame(RF_test_predict, columns=['Predicted_malware'])
result_RF = pd.concat([name_column, RF_test_predict], axis=1)
result_RF.to_csv('RF_result.csv', index=None)
